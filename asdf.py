import os
import csv
import asyncio
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder

from secret import secrets

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
LOG_FILE = "user_logs.csv"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
if not os.path.exists(LOG_FILE):
    with open(LOG_FILE, mode="w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([
            "Unic_ID", "@TG_nick", "Motion",
            "API", "Date", "Time", "API_answer"
        ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
def log_action(user: types.User, motion: str, api: str, api_answer: str):
    now = datetime.now()
    date_str = now.strftime("%Y-%m-%d")
    time_str = now.strftime("%H:%M:%S")
    username = f"@{user.username}" if user.username else ""
    with open(LOG_FILE, mode="a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([
            user.id, username, motion,
            api, date_str, time_str, api_answer
        ])

bot = Bot(token=secrets["BOT_API_TOKEN"])
dp  = Dispatcher()

# –ö–Ω–æ–ø–∫–∞ ¬´–°—Ç–∞—Ä—Ç¬ª
start_builder = InlineKeyboardBuilder()
start_builder.button(text="–°—Ç–∞—Ä—Ç", callback_data="start")
start_builder.adjust(1)
kb_start = start_builder.as_markup()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –∫—É—Ä—Å Bitcoin, —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö, –¥–∞–Ω–Ω—ã–µ World Bank
menu_builder = InlineKeyboardBuilder()
menu_builder.button(text="–ö—É—Ä—Å Bitcoin",      callback_data="bitcoin")
menu_builder.button(text="–§–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö",      callback_data="catfact")
menu_builder.button(text="–î–∞–Ω–Ω—ã–µ World Bank", callback_data="wb")
menu_builder.adjust(1, 1, 1)
kb_menu = menu_builder.as_markup()


@dp.message(lambda m: m.text == "/start")
async def cmd_start(message: types.Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã /start
    log_action(message.from_user, motion="Keyboard typing", api="NONE", api_answer="NONE")

    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é API-–∑–∞–ø—Ä–æ—Å–æ–≤:",
        reply_markup=kb_start
    )


@dp.callback_query(lambda c: c.data in {"start", "bitcoin", "catfact", "wb"})
async def process_menu(call: types.CallbackQuery):
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    log_action(call.from_user, motion="Button press", api=call.data, api_answer="")

    await call.answer()
    if call.data == "start":
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä—ë—Ö API-–∑–∞–ø—Ä–æ—Å–æ–≤:",
            reply_markup=kb_menu
        )
        return

    text = ""
    async with aiohttp.ClientSession() as session:
        if call.data == "bitcoin":
            url = "https://api.coindesk.com/v1/bpi/currentprice.json"
            async with session.get(url) as resp:
                data = await resp.json()
            if resp.status == 200 and data.get("bpi"):
                usd = data["bpi"]["USD"]["rate"]
                gbp = data["bpi"]["GBP"]["rate"]
                eur = data["bpi"]["EUR"]["rate"]
                text = (
                    "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ Bitcoin:\n"
                    f"USD: {usd}\n"
                    f"GBP: {gbp}\n"
                    f"EUR: {eur}"
                )
            else:
                text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ Bitcoin (HTTP {resp.status})"

        elif call.data == "catfact":
            url = "https://catfact.ninja/fact"
            async with session.get(url) as resp:
                data = await resp.json()
            if resp.status == 200 and data.get("fact"):
                text = f"üê± –§–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö:\n{data['fact']}"
            else:
                text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö."

        else:  # World Bank
            url = (
                "https://search.worldbank.org/api/v3/wds"
                "?format=json&qterm=energy&display_title=water"
                "&fl=display_title&rows=2&os=20"
            )
            async with session.get(url) as resp:
                data = await resp.json()
            if resp.status == 200 and data.get("rows"):
                titles = [r["display_title"] for r in data["rows"]]
                text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ World Bank:\n" + "\n".join(titles)
            else:
                text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ World Bank."

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
    log_action(call.from_user, motion="Button press", api=call.data, api_answer=text)

    await call.message.edit_text(text, reply_markup=kb_menu)


@dp.message()
async def unknown_message_handler(message: types.Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_action(message.from_user, motion="Keyboard typing", api="NONE", api_answer="NONE")

    await message.reply(
        f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ "{message.text}", —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã'
    )


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
